name: CI Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  code-quality:
    name: Code Quality & Static Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [client, server]
    defaults:
      run:
        working-directory: ./${{ matrix.component }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.component }}/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint

    - name: Type check
      run: npm run type-check || echo "Type checking not configured, skipping"

    - name: Format check
      run: npm run format:check || echo "Format checking not configured, skipping"

  test:
    name: Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [client, server]
    defaults:
      run:
        working-directory: ./${{ matrix.component }}

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.component }}/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm run test:unit
      env:
        MONGODB_URI: mongodb://localhost:27017/test

    - name: Run integration tests
      run: npm run test:integration
      env:
        MONGODB_URI: mongodb://localhost:27017/test

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.component }}-coverage
        path: ${{ matrix.component }}/coverage/

  container-security:
    name: Container Build & Security
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    strategy:
      matrix:
        component: [client, server]
    defaults:
      run:
        working-directory: ./${{ matrix.component }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.component == 'client' && '18' || '16' }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.component }}/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Check outdated dependencies
      run: npm outdated || true

    - name: Security audit
      run: npm audit --audit-level=high

    - name: Build application
      run: npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ matrix.component }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ matrix.component }}-

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./${{ matrix.component }}
        push: false
        tags: ghcr.io/nova-iris/urlshortener-${{ matrix.component }}:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        load: true

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      working-directory: /

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/nova-iris/urlshortener-${{ matrix.component }}:${{ github.sha }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Verify Dockerfile best practices
      uses: hadolint/hadolint-action@v3
      with:
        dockerfile: ${{ matrix.component }}/Dockerfile
        failure-threshold: warning

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [container-security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Start services
      run: |
        cd ./release/docker
        # Use the built images from previous step
        docker compose -f docker-compose.test.yml up -d

    - name: Wait for services
      run: |
        sleep 30

    - name: Run e2e tests
      run: |
        echo "Running e2e tests..."
        # This is a placeholder for actual e2e tests
        curl -s http://localhost:5000/health | grep -q "ok"

    - name: Cleanup
      if: always()
      run: |
        cd ./release/docker
        docker compose -f docker-compose.test.yml down -v