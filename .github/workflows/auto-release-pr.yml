name: Auto Release PR

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm install -g conventional-changelog-cli semantic-release @semantic-release/git @semantic-release/github @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator
      
      - name: Set Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Get latest release version
        id: get-latest-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "Latest tag: $LATEST_TAG"
      
      - name: Analyze commits and determine new version
        id: analyze-commits
        run: |
          # Get commits since last tag
          COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"%s")
          echo "Commits since last release:"
          echo "$COMMITS"
          
          # Determine bump type
          MAJOR=$(echo "$COMMITS" | grep -c '^feat\!:\|^BREAKING CHANGE')
          MINOR=$(echo "$COMMITS" | grep -c '^feat:')
          PATCH=$(echo "$COMMITS" | grep -c '^fix:')
          
          echo "Major changes: $MAJOR, Minor changes: $MINOR, Patch changes: $PATCH"
          
          # Extract version number from tag
          VERSION=$(echo $LATEST_TAG | sed 's/v//')
          IFS='.' read -r MAJOR_VERSION MINOR_VERSION PATCH_VERSION <<< "$VERSION"
          
          # Determine new version
          if [ "$MAJOR" -gt 0 ]; then
            NEW_MAJOR=$((MAJOR_VERSION + 1))
            NEW_VERSION="$NEW_MAJOR.0.0"
          elif [ "$MINOR" -gt 0 ]; then
            NEW_MINOR=$((MINOR_VERSION + 1))
            NEW_VERSION="$MAJOR_VERSION.$NEW_MINOR.0"
          else
            NEW_PATCH=$((PATCH_VERSION + 1))
            NEW_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$NEW_PATCH"
          fi
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: v$NEW_VERSION"
      
      - name: Generate changelog
        id: generate-changelog
        run: |
          # Generate changelog
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0
          
          # Create a changelog snippet for just this release
          RELEASE_NOTES=$(conventional-changelog -p angular -r 1)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Create release branch
        run: |
          RELEASE_BRANCH="release/v$NEW_VERSION"
          git checkout -b $RELEASE_BRANCH
          
          # If CHANGELOG.md doesn't exist, create it
          if [ ! -f CHANGELOG.md ]; then
            touch CHANGELOG.md
          fi
          
          git add CHANGELOG.md
          git commit -m "chore(release): update CHANGELOG.md for v$NEW_VERSION"
          git push --set-upstream origin $RELEASE_BRANCH
          
          echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): prepare release v${{ env.NEW_VERSION }}"
          title: "ðŸš€ Release v${{ env.NEW_VERSION }}"
          body: |
            # Release v${{ env.NEW_VERSION }}
            
            ## What's Changed
            
            ${{ env.RELEASE_NOTES }}
            
            ## Reviewer Checklist
            
            - [ ] Review code changes
            - [ ] Verify that the CHANGELOG.md accurately reflects changes
            - [ ] Check that version numbers have been properly incremented
            - [ ] Approve if all checks pass
          branch: ${{ env.RELEASE_BRANCH }}
          base: main
          labels: "release,automated-pr"
          draft: false
      
      - name: Find code owners
        id: find-code-owners
        run: |
          # Get file changes since last tag
          CHANGED_FILES=$(git diff --name-only $LATEST_TAG..HEAD)
          
          # Find code owners based on changed files
          if [ -f .github/CODEOWNERS ]; then
            REVIEWERS=""
            while IFS= read -r file; do
              OWNERS=$(grep -E "^$(dirname $file)/.*|^$(basename $file)" .github/CODEOWNERS | awk '{for(i=2;i<=NF;i++) print $i}' | sort -u)
              if [ ! -z "$OWNERS" ]; then
                REVIEWERS="$REVIEWERS $OWNERS"
              fi
            done <<< "$CHANGED_FILES"
            
            # Extract GitHub usernames from @mentions
            REVIEWERS=$(echo "$REVIEWERS" | tr ' ' '\n' | grep -o '@[a-zA-Z0-9_-]*' | sed 's/@//' | sort -u | tr '\n' ',')
            # Remove trailing comma
            REVIEWERS=${REVIEWERS%,}
            
            if [ ! -z "$REVIEWERS" ]; then
              echo "REVIEWERS=$REVIEWERS" >> $GITHUB_ENV
              echo "Assigning code owners: $REVIEWERS"
            fi
          else
            echo "No CODEOWNERS file found"
          fi
      
      - name: Assign reviewers
        if: env.REVIEWERS != ''
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
          body: |
            Requesting review from code owners: ${{ env.REVIEWERS }}
          reactions: eyes